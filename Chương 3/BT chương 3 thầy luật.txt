3.17 Viết chương trình có nhiệm vụ liên tục thực hiện việc so sánh nội dung nhận từ Port B và Port
C (số không dấu). Kết quả so sánh thể hiện bằng các đèn điều khiển LỚN (PA0), BẰNG (PA1),
NHỎ (PA2). Theo kết quả so sánh thì đèn tương ứng sẽ sáng, các đèn còn lại tắt. Muốn đèn sáng
thì bit điều khiển bằng 0, muốn tắt thì bit điều khiển bằng 1.
Chương trình cần thay đổi thế nào khi so sánh dữ liệu nhận về là số có dấu.

	Số không dấu:
.ORG 0

; CONFIG PORTB AND PORTC INPUT; PA0, PA1, PA2 OUTPUT

CLR R16
OUT DDRB, R16
OUT DDRC, R16
SER R16
OUT PORTB, R16
OUT PORTC, R16
LDI R16, $7
OUT DDRA, R16

; SOLUTION

LOOP:

	IN R16, PINB	; R16-> DATA PINB
	IN R17, PINC	; R17-> DATA PINC

	CP R16, R17
	BREQ P_A1
	BRCC P_A0
	SBI PORTA, 2
		RJMP LOOP

P_A1: SBI PORTA, 1
	RJMP LOOP

P_A0: SBI PORTA, 0
	RJMP LOOP

	Số có dấu:
.ORG 0

; CONFIG PORTB AND PORTC INPUT; PA0, PA1, PA2 OUTPUT

CLR R16
OUT DDRB, R16
OUT DDRC, R16
SER R16
OUT PORTB, R16
OUT PORTC, R16
LDI R16, $7
OUT DDRA, R16

; SOLUTION

LOOP:

	IN R16, PINB	; R16-> DATA PINB
	IN R17, PINC	; R17-> DATA PINC

	CP R16, R17
	BREQ P_A1
	BRGE P_A0
	SBI PORTA, 2
		RJMP LOOP

P_A1: SBI PORTA, 1
	RJMP LOOP

P_A0: SBI PORTA, 0
	RJMP LOOP

		3.18
a)

.ORG 0

;CONFIG PD1 AND PD0 INPUT

CLR R16
OUT DDRD, R16
LDI R16,  $3
OUT PORTD, R16

; SOLUTION
LOOP:
	IN R16, PIND
	CPI R16, 0
	BREQ SUM_
	CPI R16, 1
	BREQ SUB_
	CPI R16, 2
	BREQ AND_

	OR R21, R20
	MOV R22, R21
	RJMP LOOP

SUM_: ADD R21, R20
	MOV R22, R21
	RJMP LOOP
SUB_: SUB R21, R20
	MOV R22, R21
	RJMP LOOP
AND_: AND R21, R20
	MOV R22, R21
	RJMP LOOP

3.21 a. Viết chương trình con BCDTOASCII đổi 1 ký số BCD trong thanh ghi R20 thành biểu
diễn ASCII tương ứng và cất vào trong ô nhớ được chỉ bởi thanh ghi X. Nếu giá trị trong R20
không phải BCD thì cho bit T = 1. Mã ASCII của số 0, 1, ..,9 là 30H, 31H, .., 39H.
b. Từ đó hãy phát triển thành chương trình con đổi 2 ký số BCD trong thanh ghi R20 thành
biểu diễn ASCII của chúng, kết quả được cất vào 2 ô nhớ có địa chỉ liên tiếp với địa chỉ đầu chứa
trong thanh ghi X (mã ASCII của ký số BCD có trọng số cao sẽ được cất ở địa chỉ thấp).
A)
.ORG 0
	LDI XL, 0
	LDI XH, 1
	
	LDI R20, 9 ;SELECT BCD INPUT
	CPI R20, 10
	BRCC CONT
	LDI R21, $30
	ADD R20, R21
	ST X, R20
	RJMP HERE
HERE: 
CONT: 
	SET ;BIT T = 1
	RJMP HERE
B)
.ORG 0
	LDI XL, 0
	LDI XH, 1

	LDI R20, $AA ; TWO DIGITAL BCD
	MOV R22, R20
	ANDI R20, 0B11110000 ;TRỌNG SỐ CAO
	LDI R21, $30
	ADD R20, R21
	ST X, R20
	INC XL
	MOV R20, R22
	ANDI R20, 0B00001111 ; TRỌNG SỐ THẤP
	SWAP R20
	LDI R21, $30
	ADD R20, R21
	ST X, R20
HERE: RJMP HERE

CONT: 
	SET ;BIT T = 1
	RJMP HERE
3.22 a. Viết chương trình con HEXTOASCII đổi 1 chữ số HEX trong thanh ghi R20 (chứa ở 4
bit thấp, còn 4 bit cao bằng 0) thành biểu diễn ASCII của chúng, kết quả được cất vào thanh ghi
R20.
b. Dùng chương trình con HEXTOASCII ở câu a viết chương trình liên tục nhận data từ
Port B và đổi thành mã ASCII tương đương. ASCII của 4 bit thấp xuất ra Port C và ASCII của 4
bit thấp xuất ra Port D. Chương trình liên tục thực hiện cho tới khi giá tri nhận được là 0 thì dừng
sau khi xuất ra 2 port
A)
.ORG 0

	LDI R20, $1 ; DIGITAL HEX
	CPI R20, $A
	BRCC CHARACTER
	LDI R21, $30
	ADD R20, R21	;NUMBER
FINAL: RJMP FINAL

CHARACTER:
	LDI R21, $37
	ADD R20, R21
	RJMP FINAL
B)
.ORG 0

; CONFIG PORTB INPUT; PORTC AND PORTD OUTPUT
SER R16
OUT DDRC, R16
OUT DDRD, R16
OUT PORTB, R16
CLR R16
OUT DDRB, R16

;SOLTUTION

LOOP:
	IN R20, PINB
	MOV R21, R20
	ANDI R21, 0B00001111
	CALL HEXTOASCII
	OUT PORTC, R21
	MOV R21, R20
	ANDI R21, 0B11110000
	SWAP R21
	CALL HEXTOASCII
	OUT PORTD, R21
	CPI R20, 0
	BREQ END
	RJMP LOOP
END: RJMP END

HEXTOASCII:
	CPI R21, $A
	BRCC CHARACTER
	LDI R22, $30
	ADD R21, R22	;NUMBER
	RET
CHARACTER:
	LDI R22, $30
	ADD R21, R22
	RET

3.23 a. Viết chương trình con ASCIITOBCD đổi biểu diễn ASCII được cất trong ô nhớ được
chỉ bởi thanh ghi Y thành ký số BCD tương ứng và cất vào trong thanh ghi R20. Nếu giá trị trong
thanh ghi R20 không phải BCD thì cho bit T = 1.
b. Từ đó hãy phát triển thành chương trình con đổi 2 ký số dạng ASCII được cất trong ô
nhớ được chỉ bởi thanh ghi Y (ký số có trọng số cao chứa ở địa chỉ thấp) thành BCD 2 ký số (BCD
nén) cất trong thanh ghi R20
A)
.ORG 0

	LDI YL, 0
	LDI YH, 1

	LD R16, Y
	LDI R17, $30
	SUB R16, R17 ; ASCII TO BCD
	CPI R16, 0
	BRCS SET_T
	CPI R16, 10
	BRCC SET_T
END: RJMP END
SET_T: SET
	CLR R16
	RJMP END
B)
.ORG 0

	LDI YL, 0
	LDI YH, 1

	LD R16, Y ;TRỌNG SỐ CAO
	CALL ASCIITOBCD
	MOV R20, R16
	SWAP R20
	INC YL
	LD R16, Y ; TRỌNG SỐ THẤP
	CALL ASCIITOBCD
	OR R20, R16
END: RJMP END


ASCIITOBCD:
	LDI R17, $30
	SUB R16, R17 ; ASCII TO BCD
	CPI R16, 0
	BRCS SET_T
	CPI R16, 10
	BRCC SET_T
	RET
SET_T: SET
	CLR R16
	RET
3.25 Viết chương trình tìm kiếm trong khối dữ liệu SRAM gồm 16 byte dữ liệu bắt đầu ở địa chỉ
100H với byte dữ liệu được đọc từ Port C. Chỉ cần tìm 1 giá trị giống nhau.
a) Khi hoàn tất tìm kiếm thì đặt bit 1 của thanh ghi R24 lên 1.
b) Nếu tìm thấy dữ liệu thì đặt bit 2 của thanh ghi R24 lên 1.
c) Nếu không tìm thấy dữ liệu thì xóa bit 2 thanh ghi R24 về 0.
Chú ý không thay đổi các bit còn lại của R24
.ORG 0

;ADDR->Y
;DATA FROM PORTC -> R17
;DATA FORM (Y) -> R18
;VARIABLE -> R19

;CONFIG PORTC INPUT

SER R16
OUT PORTC, R16
CLR R16
OUT DDRC, R16

; SOLUTION

	CLR R24
	LDI YL, 0
	LDI YH, 1
	IN R17, PINC
	LDI R19, 16
LOOP:
	LD R18, Y+
	CP R17, R18
	BRNE BIT_2
	DEC R19
	BRNE LOOP

	ANDI R24, 2
	BREQ END
	ORI R24, 1
END: RJMP END

BIT_2:
	ORI R24, 2
	DEC R19
	BRNE LOOP
3.26 Viết chương trình xác định xem có bao nhiêu byte có trị bằng 0, giá trị âm, giá trị dương trong
một khối bộ nhớ SRAM có địa chỉ cuối là 1FFH, số byte của khối dữ liệu là nội dung ô nhớ 200H
(giả sử khác 0). Kết quả: ô nhớ 240H sẽ chứa số byte có trị bằng 0, ô nhớ 241H sẽ chứa số byte có
trị âm, ô nhớ 242H sẽ chứa số byte có trị dương.
.ORG 0

; ADDR -> Z
; DATA OF ADDR -> R16
; SIZE -> R17
; COUNT NEG -> R19
; COUNT ZERO -> R20
; COUNT POS -> R21

;SOLUTION

	LDI ZL, 0
	LDI ZH, 2
	LD R17, Z
	CLR R19
	CLR R20
	CLR R21

LOOP:
	LD R16, -Z
	ORI R16, 0
	BREQ ZERO
	BRMI NEGA
	INC R21
	DEC R17
	BRNE LOOP

STORE:
	STS $240, R20
	STS $241, R19
	STS $242, R21

END: RJMP END

ZERO: INC R20
	DEC R17
	BRNE LOOP
	RJMP STORE

NEGA: INC R19
	DEC R17
	BRNE LOOP
	RJMP STORE
3.27 Viết chương trình tìm phần tử nhỏ nhất trong 1 khối dữ liệu SRAM. Chiều dài của khối dữ
liệu ở trong ô nhớ 141H (giả sử khác 0) và địa chỉ bắt đầu khối ở trong ô nhớ 142H và 143H (ô
nhớ địa chỉ thấp chứa byte thấp của địa chỉ bắt đầu) (giả sử vẫn trong vùng nhớ SRAM). Kết quả
chứa phần tử nhỏ nhất đó trong ô nhớ 140H, giả sử khối dữ liệu chứa các số nhị phân không dấu.
.ORG 0

;SIZE MEMORY-> R16 (141H)
;ADDR->Z (142H, 143H)
;DATA -> R17, R18
;MIN (140H)

;SOLUTION
	LDS ZL, $142
	LDS ZH, $143
	LDS R16, $141
	SUBI R16, 1
LOOP:
	LD R17, Z+
	LD R18, Z
	CP R18, R17
	BRSH CONT
	STS $140, R18
CONT:
	STS $140, R17
	DEC R16
	BRNE LOOP
END: RJMP END
3.28 Làm lại câu 3.27 với khối dữ liệu chứa số có dấu và tìm giá trị lớn nhất.
.ORG 0

;SIZE MEMORY-> R16 (141H)
;ADDR->Z (142H, 143H)
;DATA -> R17, R18
;MIN (140H)

;SOLUTION
	LDS ZL, $142
	LDS ZH, $143
	LDS R16, $141
	SUBI R16, 1
LOOP:
	LD R17, Z+
	LD R18, Z
	CP R18, R17
	BRLT CONT
	STS $140, R18
CONT:
	STS $140, R17
	DEC R16
	BRNE LOOP
END: RJMP END
3.29 Viết chương trình thực hiện các nhiệm vụ sau:
a. Xóa 1KB địa chỉ cao SRAM vi điều khiển ATmega324P (từ địa chỉ 0xXXX đến địa chỉ
cuối).
b. Điền toàn bộ 1KB địa chỉ cao SRAM vi điều khiển ATmega324P (từ địa chỉ 0xXXX đến
địa chỉ cuối) giá trị 55H.
c. Kiểm tra lại toàn bộ giá trị ở mỗi ô nhớ (ở câu b) có bằng 55H không? Nếu đúng thì cho
bit T = 1, ngược lại bit T = 0.
A)
.ORG 0

; SIZE->1024, R17, R18
; ADDR->Z
; SOLUTION

	LDI R16, 0 ;DEL MEMORY
	LDI YL, 0
	LDI YH, 5
	LDI R18, 4
LP2: CLR R17
LP1: ST Y+, R16
	DEC R17
	BRNE LP1
	DEC R18
	BRNE LP2
END: RJMP END
B)
.ORG 0

; SIZE->1024, R17, R18
; ADDR->Z
; SOLUTION

	LDI R16, $55 ;DEL MEMORY
	LDI YL, 0
	LDI YH, 5
	LDI R18, 4
LP2: CLR R17
LP1: ST Y+, R16
	DEC R17
	BRNE LP1
	DEC R18
	BRNE LP2
END: RJMP END
C)
.ORG 0

; SIZE->1024, R17, R18
; ADDR->Z
; SOLUTION

	LDI R16, $55 ;DEL MEMORY
	LDI YL, 0
	LDI YH, 5
	LDI R18, 4
LP2: CLR R17
LP1: ST Y+, R16
	DEC R17
	BRNE LP1
	DEC R18
	BRNE LP2

	SET
	LDI YL, 0
	LDI YH, 5
	LDI R18, 4
LOOP2: CLR R17
L00P1:
	LD R16, Y+
	CPI R16, $55
	BREQ CONT
	CLT
CONT:
	DEC R17
	BRNE LP1
	DEC R18
	BRNE LP2
END: RJMP END

3.30 Viết chương trình copy nội dung 16 ô nhớ SRAM có địa chỉ đầu là 200H vào 16 thanh ghi
GPRs đầu tiên (R0-R15)

.ORG 0

;ADDR -> Z
;DATA -> R16
;COUNT -> R17
;ADDR_S -> Y

;SOLTUTION

	LDI ZL, 0
	LDI ZH, 2
	LDI R17, 16
	LDI YL, 0
	LDI YH, 0

LP1:
	LD R16, Z+
	ST Y+, R16
	DEC R17
	BRNE LP1

END: RJMP END
BT: Đếm led 7 đoạn
.ORG 0

;PORTB -> OUT

	SER R16
	OUT DDRB, R16
	LDI R18, 10
	LDI R16, 9
LOOP:
	CALL SEG_7
	OUT PORTB, R17
	CALL DELAY_500MS
	DEC R16
	CPI R16, $FF
	BRNE LOOP
	LDI R16, 9
	BREQ LOOP
	


SEG_7:
	LDI ZL, LOW(DATA_SEG_7<<1)
	LDI ZH, HIGH(DATA_SEG_7<<1)
	CLR R17
	ADD ZL, R16
	ADC ZH, R17
	LPM R17, Z
	RET

DELAY_500MS:
		LDI R22, 5
LP2:	LDI R20, 100
LP1:	LDI R21, 250
LP0:	NOP
	DEC R21
	BRNE LP0
	DEC R20
	BRNE LP1
	DEC R22
	BRNE LP2
	RET
DATA_SEG_7: .DB $3F, $06, $5B, $4F, $66, $6D, $7D, $07, $7F, $6F
3.31 Viết chương trình copy 16 word của bộ nhớ Flash có địa chỉ đầu là 0100H vào vùng SRAM
có địa chỉ đầu bằng địa chỉ byte thấp của word đầu tiên của khối word copy.
.ORG 0X100

MYDATA: .DW 200, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16
; ADDR_FLASH -> Z
; ADDR_SRAM -> Y
; VALUE -> R16
; SIZE -> R17

;SOLUTION

	LDI ZH, HIGH(MYDATA<<1)
	LDI ZL, LOW(MYDATA<<1)
	LDI YH, HIGH(MYDATA<<1)
	LDI YL, LOW(MYDATA<<1)	
	LDI R17, 32
LOOP:
	LPM R16, Z+
	ST Y+, R16
	DEC R17
	BRNE LOOP
END: RJMP END
3.32 Cho chương trình con SOBIT_1 có chức năng đếm số bit 1 có trong thanh ghi R20 (in: R20,
out: R21 chứa kết quả). Viết chương trình đếm trong chuỗi data SRAM gồm 100 byte có địa chỉ
đầu là $200, có bao nhiêu ô nhớ có tổng số bit 1 là con số chẵn. Kết quả cất vào ô nhớ $1FF
.ORG 0

; SOLUTION

	LDI R20, 3
	CALL SO_BIT_1

END: RJMP END


SO_BIT_1:
	LDI R22, 8
	CLR R21
LP:	ROR R20
	BRCC CONT
	INC R21
CONT:
	DEC R22
	CLC
	BRNE LP
	RET
3.33 Viết chương trình tạo xung như hình vẽ, cho trước chương trình con DL1s có chức năng tạo
trễ 1 giây
.ORG 0

; CONFIG PA0, PA1, PA2 OUTPUT
	
	LDI R16, 7
	OUT DDRA, R16

;SOLUTION
LOOP:
	LDI R16, 4
	OUT PORTA, R16
	CALL DELAY_1S
	LDI R16, 5
	OUT PORTA, R16
	CALL DELAY_1S
	LDI R16, 3
	OUT PORTA, R16
	CALL DELAY_1S
	LDI R16, 4
	OUT PORTA, R16
	CALL DELAY_1S
	LDI R16, 5
	OUT PORTA, R16
	CALL DELAY_1S
	LDI R16, 1
	OUT PORTA, R16
	CALL DELAY_1S
	RJMP LOOP

DELAY_1S:
	LDI R20, 4
LP3:	LDI R21, 250
LP2:	LDI R22, 250
LP1:	NOP
	DEC R22
	BRNE LP1
	DEC R21
	BRNE LP2
	DEC R20
	BRNE LP3
	RET

